//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub email: String,
    pub password: String,
    pub salt: String,
    pub user_type: UserTypeEnum,
    pub name: String,
    pub surname: String,
}

// Define the `UserType` active enum
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "user_type_enum")]
pub enum UserTypeEnum {
    #[sea_orm(string_value = "Individual")]
    Individual,
    #[sea_orm(string_value = "Corporation")]
    Corporation,
}

impl From<String> for UserTypeEnum {
    fn from(value: String) -> Self {
        match value.as_str() {
            "Individual" => UserTypeEnum::Individual,
            "Corporation" => UserTypeEnum::Corporation,
            _ => panic!("Invalid user type"),
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::authn::Entity")]
    Authn,
}

impl Related<super::authn::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Authn.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
