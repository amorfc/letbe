//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "user_type")]
pub enum UserTypeEnum {
    #[sea_orm(string_value = "corporation")]
    Corporation,
    #[sea_orm(string_value = "tutor")]
    Tutor,
    #[sea_orm(string_value = "member")]
    Member,
    #[sea_orm(string_value = "student")]
    Student,
    #[sea_orm(string_value = "guest")]
    Guest,
    #[sea_orm(string_value = "other")]
    Other,
}

impl From<String> for UserTypeEnum {
    fn from(value: String) -> Self {
        match value.as_str() {
            "Corporation" => Self::Corporation,
            "Tutor" => Self::Tutor,
            "Member" => Self::Member,
            "Student" => Self::Student,
            "Guest" => Self::Guest,
            _ => Self::Other,
        }
    }
}
